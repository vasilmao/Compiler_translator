     1                                  input:
     2 00000000 4D31C0                  xor r8, r8 ; answer
     3 00000003 4D31C9                  xor r9, r9 ; helper
     4                                  InputLoop:
     5 00000006 4831C0                  xor rax, rax
     6 00000009 BF00000000              mov rdi, 0
     7 0000000E 48BE-                   mov rsi, InBuffer
     7 00000010 [0000000000000000] 
     8 00000018 BA01000000              mov rdx, 1
     9 0000001D 0F05                    syscall
    10 0000001F 448A1425[00000000]      mov r10b, byte [InBuffer]
    11 00000027 4983FA30                cmp r10, '0'
    12 0000002B 7C1C                    jl InputLoopExit
    13 0000002D 4983FA39                cmp r10, '9'
    14 00000031 7716                    ja InputLoopExit
    15 00000033 4983EA30                sub r10, '0'
    16 00000037 4D89C1                  mov r9, r8
    17 0000003A 49C1E003                shl r8, 3
    18 0000003E 49D1E1                  shl r9, 1
    19 00000041 4D01C8                  add r8, r9
    20 00000044 4D01D0                  add r8, r10
    21                                  ;push r10
    22 00000047 EBBD                    jmp InputLoop
    23                                  ; need: r8 = r8 * 10
    24                                  InputLoopExit:
    25 00000049 4C89C0                  mov rax, r8
    26 0000004C C3                      ret
    27                                  
    28                                  print:
    29 0000004D 488B442408              mov rax, qword [rsp + 8]
    30 00000052 BB0A000000              mov rbx, 10
    31 00000057 4831D2                      xor rdx, rdx
    32 0000005A 4831FF                      xor rdi, rdi ; counter
    33                                  	StackNumLoop:
    34 0000005D 48F7F3                          div rbx ; rax = res, rdx = mod
    35 00000060 52                      		push rdx
    36 00000061 48FFC7                  		inc rdi
    37 00000064 4831D2                  		xor rdx, rdx
    38 00000067 4883F800                		cmp rax, 0
    39 0000006B 75F0                    		jne StackNumLoop
    40 0000006D 4831C9                      xor rcx, rcx
    41                                  	BuffNumLoop:
    42 00000070 58                      		pop rax
    43                                          ;call WriteDigitToBuffer
    44 00000071 4883C030                        add rax, '0'
    45 00000075 488981[01000000]                mov [OutBuffer + rcx], rax
    46 0000007C 48FFC1                          inc rcx
    47 0000007F 66FFCF                  		dec di
    48 00000082 6683FF00                		cmp di, 0
    49 00000086 75E8                    		jne BuffNumLoop
    50 00000088 B801000000                  mov rax, 1
    51 0000008D BF01000000                  mov rdi, 1
    52 00000092 48BE-                       mov rsi, OutBuffer
    52 00000094 [0100000000000000] 
    53 0000009C 4889CA                      mov rdx, rcx
    54 0000009F 0F05                        syscall
    55 000000A1 B801000000                  mov rax, 1
    56 000000A6 BF01000000                  mov rdi, 1
    57 000000AB 48BE-                       mov rsi, NextLine
    57 000000AD [1400000000000000] 
    58 000000B5 BA01000000                  mov rdx, 1
    59 000000BA 0F05                        syscall
    60 000000BC C3                      	ret
    61                                  
    62                                  section .data
    63 00000000 00                      InBuffer: db 0
    64 00000001 00<rep 13h>             OutBuffer: times 19 db 0
    65 00000014 20                      NextLine: db 0x20
    66                                  section .text
    67                                  global _start
    68                                  _start:
    69 000000BD 4883EC08                sub rsp, 8
    70 000000C1 4889E5                  mov rbp, rsp
    71 000000C4 EB7F                    jmp factorial_END
    72                                  factorial:
    73 000000C6 4889E5                  mov rbp, rsp
    74 000000C9 4883C508                add rbp, 8 ; this was fdecl
    75 000000CD 488B4500                mov rax, [rbp + 0] ; this was name
    76 000000D1 50                      push rax
    77 000000D2 B802000000              mov rax, 2 ; var = const 0x56551bc55b60
    78 000000D7 5B                      pop rbx
    79 000000D8 4893                    xchg rax, rbx
    80 000000DA 4831D2                  xor rdx, rdx
    81 000000DD 4839D8                  cmp rax, rbx
    82 000000E0 0F9EC0                  setle al
    83 000000E3 4831DB                  xor rbx, rbx
    84 000000E6 88C3                    mov bl, al
    85 000000E8 4831C0                  xor rax, rax
    86 000000EB 88D8                    mov al, bl
    87 000000ED 4883F800                cmp rax, 0
    88 000000F1 7406                    je LNOT0x56551bc55c50 ; this is condition start
    89 000000F3 B801000000              mov rax, 1 ; var = const 0x56551bc55bf0
    90 000000F8 C3                      ret ; thats it
    91                                  LNOT0x56551bc55c50:
    92 000000F9 90                      nop
    93 000000FA 90                      nop ; condition end
    94 000000FB 55                      push rbp ; save rbp before call
    95 000000FC 488B4500                mov rax, [rbp + 0] ; this was name
    96 00000100 50                      push rax
    97 00000101 B801000000              mov rax, 1 ; var = const 0x56551bc55e60
    98 00000106 5B                      pop rbx
    99 00000107 4893                    xchg rax, rbx
   100 00000109 4831D2                  xor rdx, rdx
   101 0000010C 4829D8                  sub rax, rbx
   102 0000010F 50                      push rax ; this was argument passing
   103 00000110 E8B1FFFFFF              call factorial ; the call
   104 00000115 4883C408                add rsp, 8
   105 00000119 5D                      pop rbp ; after call
   106 0000011A 50                      push rax
   107 0000011B 55                      push rbp ; save rbp before call
   108 0000011C 488B4500                mov rax, [rbp + 0] ; this was name
   109 00000120 50                      push rax
   110 00000121 B802000000              mov rax, 2 ; var = const 0x56551bc56070
   111 00000126 5B                      pop rbx
   112 00000127 4893                    xchg rax, rbx
   113 00000129 4831D2                  xor rdx, rdx
   114 0000012C 4829D8                  sub rax, rbx
   115 0000012F 50                      push rax ; this was argument passing
   116 00000130 E891FFFFFF              call factorial ; the call
   117 00000135 4883C408                add rsp, 8
   118 00000139 5D                      pop rbp ; after call
   119 0000013A 5B                      pop rbx
   120 0000013B 4893                    xchg rax, rbx
   121 0000013D 4831D2                  xor rdx, rdx
   122 00000140 4801D8                  add rax, rbx
   123 00000143 C3                      ret ; thats it
   124 00000144 C3                      ret
   125                                  factorial_END:
   126 00000145 55                      push rbp ; save rbp before call
   127 00000146 E8B5FEFFFF              call input ; the call
   128 0000014B 4883C400                add rsp, 0
   129 0000014F 5D                      pop rbp ; after call
   130 00000150 48894500                mov [rbp + 0], rax ;this was var decl
   131 00000154 55                      push rbp ; save rbp before call
   132 00000155 55                      push rbp ; save rbp before call
   133 00000156 488B4500                mov rax, [rbp + 0] ; this was name
   134 0000015A 50                      push rax ; this was argument passing
   135 0000015B E866FFFFFF              call factorial ; the call
   136 00000160 4883C408                add rsp, 8
   137 00000164 5D                      pop rbp ; after call
   138 00000165 50                      push rax ; this was argument passing
   139 00000166 E8E2FEFFFF              call print ; the call
   140 0000016B 4883C408                add rsp, 8
   141 0000016F 5D                      pop rbp ; after call
   142 00000170 4883C408                add rsp, 8
   143 00000174 B83C000000              mov rax, 0x3C
   144 00000179 4831FF                  xor rdi, rdi
   145 0000017C 0F05                    syscall
