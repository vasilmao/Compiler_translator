     1                                  input:
     2 00000000 4D31C0                  xor r8, r8 ; answer
     3 00000003 4D31C9                  xor r9, r9 ; helper
     4 00000006 4831C0                  xor rax, rax
     5 00000009 BF00000000              mov rdi, 0
     6 0000000E 48BE-                   mov rsi, InBuffer
     6 00000010 [0000000000000000] 
     7 00000018 BA01000000              mov rdx, 1
     8 0000001D 0F05                    syscall
     9                                  
    10 0000001F 803C25[00000000]2D      cmp byte [InBuffer], '-'
    11 00000027 7504                    jne not_minus
    12 00000029 6A01                    push qword 1
    13 0000002B EB04                    jmp after_minus
    14                                  not_minus:
    15 0000002D 6A00                    push qword 0 ; 0 = not minus
    16 0000002F EB19                    jmp deystvie
    17                                  after_minus:
    18                                  
    19                                  InputLoop:
    20 00000031 4831C0                  xor rax, rax
    21 00000034 BF00000000              mov rdi, 0
    22 00000039 48BE-                   mov rsi, InBuffer
    22 0000003B [0000000000000000] 
    23 00000043 BA01000000              mov rdx, 1
    24 00000048 0F05                    syscall
    25                                  deystvie:
    26 0000004A 448A1425[00000000]      mov r10b, byte [InBuffer]
    27 00000052 4983FA30                cmp r10, '0'
    28 00000056 7C1C                    jl InputLoopExit
    29 00000058 4983FA39                cmp r10, '9'
    30 0000005C 7716                    ja InputLoopExit
    31 0000005E 4983EA30                sub r10, '0'
    32 00000062 4D89C1                  mov r9, r8
    33 00000065 49C1E003                shl r8, 3
    34 00000069 49D1E1                  shl r9, 1
    35 0000006C 4D01C8                  add r8, r9
    36 0000006F 4D01D0                  add r8, r10
    37                                  ;push r10
    38 00000072 EBBD                    jmp InputLoop
    39                                  ; need: r8 = r8 * 10
    40                                  InputLoopExit:
    41 00000074 4C89C0                  mov rax, r8
    42 00000077 5B                      pop rbx
    43 00000078 4885DB                  test rbx, rbx
    44 0000007B 7403                    je input_ret
    45 0000007D 48F7D8                  neg rax
    46                                  input_ret:
    47 00000080 C3                      ret
    48                                  
    49                                  print:
    50 00000081 488B442410              mov rax, qword [rsp + 16]
    51 00000086 83F800                  cmp eax, 0d
    52 00000089 7D28                    jge AfterMinus
    53 0000008B 50                      push rax
    54 0000008C B801000000              mov rax, 1
    55 00000091 BF01000000              mov rdi, 1
    56 00000096 C60425[01000000]2D      mov byte [OutBuffer], '-'
    57 0000009E 48BE-                   mov rsi, OutBuffer
    57 000000A0 [0100000000000000] 
    58 000000A8 BA01000000              mov rdx, 1
    59 000000AD 0F05                    syscall
    60 000000AF 58                      pop rax
    61 000000B0 48F7D8                  neg rax
    62                                  AfterMinus:
    63 000000B3 BB0A000000              mov rbx, 10
    64 000000B8 4831D2                      xor rdx, rdx
    65 000000BB 4831FF                      xor rdi, rdi ; counter
    66                                  	StackNumLoop:
    67 000000BE 48F7F3                          div rbx ; rax = res, rdx = mod
    68 000000C1 52                      		push rdx
    69 000000C2 48FFC7                  		inc rdi
    70 000000C5 4831D2                  		xor rdx, rdx
    71 000000C8 4883F800                		cmp rax, 0
    72 000000CC 75F0                    		jne StackNumLoop
    73 000000CE 4831C9                      xor rcx, rcx
    74                                  	BuffNumLoop:
    75 000000D1 58                      		pop rax
    76                                          ;call WriteDigitToBuffer
    77 000000D2 4883C030                        add rax, '0'
    78 000000D6 488981[01000000]                mov [OutBuffer + rcx], rax
    79 000000DD 48FFC1                          inc rcx
    80 000000E0 66FFCF                  		dec di
    81 000000E3 6683FF00                		cmp di, 0
    82 000000E7 75E8                    		jne BuffNumLoop
    83 000000E9 B801000000                  mov rax, 1
    84 000000EE BF01000000                  mov rdi, 1
    85 000000F3 48BE-                       mov rsi, OutBuffer
    85 000000F5 [0100000000000000] 
    86 000000FD 4889CA                      mov rdx, rcx
    87 00000100 0F05                        syscall
    88 00000102 B801000000                  mov rax, 1
    89 00000107 BF01000000                  mov rdi, 1
    90 0000010C 48BE-                       mov rsi, NextLine
    90 0000010E [1400000000000000] 
    91 00000116 BA01000000                  mov rdx, 1
    92 0000011B 0F05                        syscall
    93 0000011D C3                      	ret
    94                                  
    95                                  section .data
    96 00000000 00                      InBuffer: db 0
    97 00000001 00<rep 13h>             OutBuffer: times 19 db 0
    98 00000014 0A                      NextLine: db 0x0a
    99                                  section .text
   100                                  global _start
   101                                  _start:
   102 0000011E 4883EC10                sub rsp, 16
   103                                   ; 48_81 (83 if imm8 instead of imm32)_
   104 00000122 4889E5                  mov rbp, rsp
   105 00000125 EB2C                    jmp sum_END
   106                                  sum: ;eeee fdecl
   107 00000127 4883EC08                sub rsp, 8
   108 0000012B 4889E5                  mov rbp, rsp
   109 0000012E 488B4518                mov rax, [rbp + 24] ; this was name
   110 00000132 50                      push rax
   111 00000133 488B4520                mov rax, [rbp + 32] ; this was name
   112 00000137 4889C3                  mov rbx, rax
   113 0000013A 58                      pop rax
   114 0000013B 4831D2                  xor rdx, rdx
   115 0000013E 4801D8                  add rax, rbx
   116 00000141 48894500                mov [rbp + 0], rax ;this was var decl
   117 00000145 488B4500                mov rax, [rbp + 0] ; this was name
   118 00000149 4883C408                add rsp, 8
   119 0000014D C3                      ret ; thats it
   120 0000014E 4883C408                add rsp, 8 ; this was fdecl
   121 00000152 C3                      ret
   122                                  sum_END:
   123 00000153 55                      push rbp ; save rbp before call
   124 00000154 E8A7FEFFFF              call input ; the call
   125 00000159 5D                      pop rbp 
   126 0000015A 4883C400                add rsp, 0
   127 0000015E 48894500                mov [rbp + 0], rax ;this was var decl
   128 00000162 55                      push rbp ; save rbp before call
   129 00000163 E898FEFFFF              call input ; the call
   130 00000168 5D                      pop rbp 
   131 00000169 4883C400                add rsp, 0
   132 0000016D 48894508                mov [rbp + 8], rax ;this was var decl
   133 00000171 488B4508                mov rax, [rbp + 8] ; this was name
   134 00000175 50                      push rax ; this was argument passing
   135 00000176 488B4500                mov rax, [rbp + 0] ; this was name
   136 0000017A 50                      push rax ; this was argument passing
   137 0000017B 55                      push rbp ; save rbp before call
   138 0000017C E8A6FFFFFF              call sum ; the call
   139 00000181 5D                      pop rbp 
   140 00000182 4883C410                add rsp, 16
   141 00000186 50                      push rax ; this was argument passing
   142 00000187 55                      push rbp ; save rbp before call
   143 00000188 E8F4FEFFFF              call print ; the call
   144 0000018D 5D                      pop rbp 
   145 0000018E 4883C408                add rsp, 8
   146 00000192 4883C410                add rsp, 16
   147 00000196 B83C000000              mov rax, 0x3C
   148 0000019B 4831FF                  xor rdi, rdi
   149 0000019E 0F05                    syscall
